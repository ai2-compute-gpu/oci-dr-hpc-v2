package cmd

import (
	"fmt"

	"github.com/oracle/oci-dr-hpc-v2/internal/logger"
	"github.com/oracle/oci-dr-hpc-v2/internal/recommender"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

var (
	resultsFile string
)

var recommenderCmd = &cobra.Command{
	Use:   "recommender",
	Short: "Analyze test results and provide recommendations",
	Long: `Analyze diagnostic test results from a JSON file and provide recommendations for diagnostics and repairs.
The recommender reads test results generated by the reporter and suggests actions to fix any issues found.`,
	SilenceUsage: true,
	RunE: func(cmd *cobra.Command, args []string) error {
		logger.Info("Starting recommender analysis")

		// Validate required flags
		if resultsFile == "" {
			return fmt.Errorf("results file is required. Use -r or --results-file flag to specify the results file")
		}

		// Get output format from configuration
		outputFormat := viper.GetString("output")
		if outputFormat == "" {
			outputFormat = "friendly" // Default to friendly format for recommender
		}

		// Run the recommender with specified output format
		if err := recommender.AnalyzeResults(resultsFile, outputFormat); err != nil {
			logger.Errorf("Failed to analyze results: %v", err)
			return fmt.Errorf("failed to analyze results: %w", err)
		}

		logger.Info("Recommender analysis completed successfully")
		return nil
	},
}

func init() {
	rootCmd.AddCommand(recommenderCmd)
	recommenderCmd.Flags().StringVarP(&resultsFile, "results-file", "r", "", "results file to analyze (required)")
	recommenderCmd.MarkFlagRequired("results-file")
}
